



Language:
		communication with human
		
				english,telugu,tamil,kannada,hindi......
		
Programming Languge:
===================		
		communication with machine
	
		set of programs 

		c,c++,java,python,.net,....


	POP								OOP					
	B,BCPL,C,COBOL,PHOTON...	c++,java,python,.net,....
	
			performance			inheritance,polymorphisam
			security			abstraction,encapsulation
		
Why python

Python--1991	feb 20th 1991

	guido van russam

		1.x
		2.x
		3.x

HelloWorld.java

		
class HelloWorld
{
public static void main(String args[])
{
	System.out.println("welcome to java .....");
}

}	53 keywords

english 26
compile--		.class
execute--
		

	33 keywords


python-->the complete monty python's circus


		1.Funtional Programming	from C Language
		2.Object Oriented Programming feature from C++
		3.Shell Scrpting features from perl & shell script
		4.Modular Programming
		
		C,ABC-->syntax


	1.desktop applications	(tkinter)
	2.web applicationss		django/flask 
	3.database applications	(PDBC)
	4.network programming
	5.gaming
	6.DA
	7.IOT
	8.ML
	9.AI


Features:
=========

1)simple and easy to learn 
2)free source and open source  jython
3)High level Programming language
4)platform independent 	
5)portability 
6)dynamic typed 		a=123		int a=123;//static typed 
7)interpreted
8)rich library set




identifiers:
===========
any name in python will call it as identifier

	varname,classname,method(funtion),interface,objname....
	
			a-z
			A-Z
			0-9
			_
	
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 
'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 
'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


Datatypes:
==========


		sandeep
		number 12312312312312
		23.234
		
	1)int
	2)float
	3)complex
	4)bool
	5)str
	
	6)List
	7)Tuple
	8)Set
	9)Frozenset
	10)dict
	11)None



	type()
	id()
	print()
	
	typecasting
	int()
	float()
	complex()
	str()
	bool()
	input()

*** Fundamental datatypes are immutable




	List
	=====
		To store group of values/objects as a single entity 
	 
	 1)duplicates are allowed
	 2)insertion order is preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)growable in nature 
	 5)[] square brakets
	 6)list is mutable(append,remove)
	 
	 Tuple:
	 ========
	 	To store group of values/objects as a single entity 
	 
	 1)duplicates are allowed
	 2)insertion order is preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)() paranthesis
	 5)tuple is imutable	
	 
	 
	Set:
	=====
			To store group of values/objects as a single entity 
	 
	 1)duplicates are not allowed
	 2)insertion order is not preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)growable in nature 
	 5){} curly braces
	 6)set is mutable(add,remove)
	 
	 FrozenSet:
	 ==========
	 	To store group of values/objects as a single entity 
	 
	 1)duplicates are not allowed
	 2)insertion order is not preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)not growable in nature 
	 5)({}) curly braces
	 6)frozenset is imutable
	 
	 
	 dict:
	 =====
	 1)group of objects as a key,value pair
	 2){}
	 3)duplicate keys are not allowed and values can be duplicate
	 4)mutable
	 5)growable in nature 
	 
	 
	 
	 
String :
===========
		sequence chars / group of chars-->string 
			
				name="Astrazeneca"
				
				index -->0
	 
				+ index
				- index
	 
	 input
	 
	 
	 
	 identation
	 
	flow control statementes

Functions:
==========
	reusability


	def add():
		


Lamda Functions:
================

	lambda keyword


#syntax: lambda args:expression


input

	username	astrazenca
	password	astra123


		login success
		
		invalid credentials

	python---->file

		r,w,a

String/LIst/SET/Dict operations:
================================
OOPS:
=======

class
object 
constrcutor 
self
__init__


class is a collection of data members and member functions

	class 

oops 
	inheritance--code reusability

	its a process of aquiring the features from one class to another class

	
	class Test
		1000 methods
	
	
	
	
	class Child(Test)
	
		20 methods

	inheritance	-->code reusability
	
	polymorphisam -->method overloading method overriding 
	
	method overloading:
			method name is same no of params are different 
			
	method overriding:
			method name is same the implementation is different
			
			
	Exception Handling:
=======================	
			
			with out exceptiond handling 
				
				1)abnormal termination
				2)system defined error messages 
			
			
			with exception handling
			
				1)normal termination
				2)user friendly error messages
			
			
			
	try	--error code 
	
	
	except--handling code 
	
	
	
	4 keywords
	
		try		error code
		except	handling code
		finally	cleanup code
		raise	
	
	
	
	
	zerodivisioerror
	syntaxerror
	valueerror
	filenotfound
	exception
	
	
	
	pip instlall packagename
	
	
JAVA:
======
	
	why java ?
	
	one of the object oriented PL
	
	
	1996	-->JDK 1.0		-->sun micro system--->oracle corporation
	
				21
			OAK-->James Gosling
	
	
	1)platform independent  WORA
	2)Garbage Collection   automated  garbage collector 
	
					java
				jse	 jee  jme	
	
		1)standalone applications(core java,awt,swings,applets....)
		2)web application		(servlets,jsp,mvc,spring web...)
		3)distributed 			(webservices)
		4)mobile 				(android)	
	
	
	welcome/helloworld
	
	53 
	
class HelloWorld
{
public static void main(String args[])
{
	System.out.println("welcome to java .....");
}

}
		javac filename.java
		java classname

identifiers:
=============

	any name in java will call it as identifier 
	
		classname,methodname,varname,objname,interfacename.....


		a-z
		A-Z
		0-9
		$
		_

variables:
===========
		name given to the memory
		
		local varibles
		global variables


static typed 

	datatype varname=value;



PDT 		NPDT
8 			Stirng,array

	byte	1 byte		-128 to 127
	short	2			-32768 to 32767
	int		4			-2147483648 to 2147483647
	long	8           -2 power 63 to (2 power of 63 )-1
								long age
	float	4         23.5435346312786873  5-6 decimal places
	double	8							14-15 decimal places
	
	boolean	1bit    	true false 
	char 	2bytes		'M'



4 points

syntax:
			for static properties we will have static keyword
			if there is no static keyword i.e instance 

memory
			instance properties will get memory  at the time of object creation
			
			static properties will get memory only once at the time of class loading into jvm
			
				classname objname=new classname();
		A			A obj=new A();
			
access
			if it is instance we have to access by using object reference 
			if it is static we have to access by using classname 
		

usage 
			
			if we have common data where we required one time memory will go for static

					countryname,statename,clg name,schoolname,orgname 
			if we have unique data to represnt then will go with instance 
			
					eid,name,aadhar,pan,accno....

		by default package for every java file is java.lang
		by default parent class for every java file  java.lang.Object
	
package:folder
		2 types
			predfined packages	
			user defined 	package 
	
import 

eclipse IDE


methods


syntax
======

	accessmodifier instance/static returntype methodname(dt parm1,...)
		{
		
		
		
		}

OOPS:
====	
	inheritance		code reusability  extends ,implements
	polymorphisam
	encapsulation
	abstraction







access modifiers:
==================

	public private protected default
	

NOTE
		BY DEFAULT PACKAGE FOR EVERY JAVA FILE IS java.lang
		BY DEFAULT PARENT CLASS FOR EVERY JAVA CLASS  java.lang.Object
	



Multiple Inheritance 
		not supported by java through classes
		supported by java through interfaces 


abstract method ,concrete method

concrete method:
===============
	a method with body/implementation will call it as concrete method

abstract method:
================
	a method with out body/implementation will call it as abstract method


		public abstract void m1();



	class-->its a collection only concrete methods
abstract class-->its a combination of both concrete and abstract methods
	interface--->its a collection of only abstract methods

			interface methods are by default public abstract
			interface variables are by default public static final
	

polymorphisam
Overloading 
	method name is same signature is different
						no of params
						order of params
						type of params 

Overriding

	method name is same implementation is different 
	
	
	
AccessModifiers:
===============
		public			anyone/anywhere 
		protected		package level scope/outside the package only in child classes 
		default			package level scope 
		private 		class level scipe 
	
	
	
	
	final :fixed ...
	
	@3 places 
	
		before the variable
		before the method
		before the class 
		
	Scanner-->java.util import 

		dynamic input
		
constrcutor:
		special member function which is used to intialize the object 
		
		Object creation
		
			classname objname=new classname();
			classname objname=new constrcutor();//constrcutor calling 
			
			
		-->constructor name classname must be same
		-->default,parameterized 
		-->constrcutor looks line method ,but constrcutor must be classname method name can be anyting
		-->constrcutor never return ,method can return anything
		
		
this,super keywords
	
	
	this keyword is used to represent current class properties(variable,method,constrcutor,object)
	
	super keyword is used to reperesent parent class properties(variable,method,constrcutor)
	
	
encapsulation
		
		its process of wrapping the data and corresponding methods together
				the data as private and methods as public 

exception handling
		
		1)system defined error messages
		2)abnormal termination
	
	
	
	Exception in thread "main" java.lang.ArithmeticException: / by zero
	at com.astra.exceptions.ExceptionEx.main(ExceptionEx.java:15)  ---->system defined error message 

	
	
	
	Cannot divide by zero--->user friendly error message
	
	
	arrays:
	========
	
		variables
		
		int id =123;
			id=124;
	
	
		[]-->square brackets
	
		int ids[]={12,32,4,5,3,22,64,33,63};
		
		index-->0,1,2,3,4,5,6,7,8 AIOE
		
		
		
		
		
	
	Advantages 
	1)user friendly error messages
	2)normal termination
	
	
	
	user defined 
	
	1)make the class as child class to the anyone of the parent classs	
	2)parameterized constructor
	
	throw 
	
	throws 
	
	
	class A extends Exception/Throwable/RuntimeException
	{
	
	
	}
	
Multi Threading:
================	
	
	
	multi tasking:executing several tasks simutaniously
	
		process based multi tasking
			
				executing several tasks simutaniously where each task is seprate independent process
		
		thread based multi tasking 
	
				executing several tasks simutaniously where each task belongs to thes same process
	
			process:collection of threads
			thread: a smallest unit of process
	
	
	
	
	
multi threading


two ways

	1)implements Runnable-->MI
	2)extends Thread


				run()






interface -any number of methods

FI -->one abstract method --->SAM

MI-->the interface with zero abstract method-->Serializable

thread priorities 1-10

Synchronization
================

	public void m1()    t1,t2,t3,t4
	{						
	
	}

	public synchronized void m2()
	{
	
	}


Inter Thread Communication:
===========================
		wait ,notify,notifyAll

COLLECTIONS:
============
	VAIRABLE--ONE VALUE AT A TIME
		
arrays-

	1)only homogeneous data is allowed
	2)array size is fixed 
	3)no utility methods

Collections-

	1)both homogeneous data and haterogenous data is allowed
	2)collections  size is not  fixed /growable in nature
	3)lots utility methods

java.util,java.lang,java.io
	List:
		1)Duplicates are allowed 
		2)insertion order is preserved 


		AL-10	--16		-->NO THREAD SAFETY,PERFORMANCE
		V-10	-->20		-->THREAD SAFETY,LOW PERFORMANCE
	
		AL,LL


	Set:
	HashSet
		1)Duplicates are not allowed 
		2)Insertion order is not preserved 
					
	LinkedHashSet
			
		1)Duplicates are not allowed 
		2)Insertion order is  preserved 
	
	TreeSet
		1)Duplicates are not allowed 
		2)Insertion order is not preserved 
		3)will give alphabatical/ascending order		
		

	Map:
	HashMap
		1)Duplicates keys are not allowed values can be duplicate
		2)Insertion order is not preserved 
					
	LinkedHashMap
			
		1)Duplicates keys are not allowed values can be duplicate
		2)Insertion order is  preserved 
	
	TreeMap
		1)Duplicates are not allowed 
		2)Insertion order is not preserved 
		3)will give alphabatical/ascending order based on key		
				
		
		
	ProductManagementApp	
		
		1)AddProduct			
		2)UpdateProduct
		3)DeleteProduct
		4)GetProductInfo
		5)GetAllProducts
		6)GetALLProducts In between Price
		7)GetAll Products With Category
		8)GetAll Products by Brand

save  collections

public class Product
{
private	int	productId;
private	String	productName;
private	float	productPrice;
private String productCategory;
private String productBrandName;
}





Java8 Features
===============
	1)lambda expression
	2)Functional Interface		-->SAM  @FunctionalInterface
	3)default , static methods

	
	public int addition(int a,int b)
	{
	 int result=a+b;
	 return result;
	}

lamda expression

	without accessmodifier,return ,method name,parameter DT,curly braces

	  (a,b)->a+b;//expression
	


	EmployeeManagementApp	
		
		1)AddEmployee			
		2)UpdateEmployee
		3)DeleteEmployee
		4)GetEmployeesInfo
		5)GetAllEmployees
		6)GetALLEmployees In between Salries
		7)GetAll Employees by Company
		8)GetAll Employees by Designation

save  collections

public class Employee
{
private	int	employeeId;
private	String	employeeName;
private	float	employeeSalary;
private String employeeCompany;
private String employeeDesignation;
}

files
Database
MYSQL--RDBMS
======
		
		querys 
eid ename esal eadd designation
123 suresh .........
tables


DDL --create,alter,drop,truncate,rename
DML--insert,update,delete
DRL---select
JDBC


java app--->database 

		JDBC API-->sun micro system -->interfaces classes 

	java database connectivity

		JAVA-->MYSQL

5 STEPS 


1.LOADING THE DRIVER CLASS


2.CREATEING THE CONNECTION


3.CREATING THE STATEMENT


4.EXECUTING THE QUERY


5.CLOSING THE CONNECTION


		jar
		
		mysql.connector.jar
		
		
		Statement 
		PreparedStatement
		CallableStatement--->making procedure calls
		
		
		
					java 				Database 
		

							driver	jdbc-odbc driver
									native api driver
									network protocal driver 
									thin driver type4 driver


Junit Testing:
=============

		unit- a peace of code

		
	ASSERTIONS
	SSERT CLASS 


ERICH GAMMA AND KENT BECK




Jdbc Sun micro system

1)table creation
2)querys
3)exception handing
4)no cache support


JPA--->sun micro system

1)no table creations
2)no querys
3)no exception hadnling
4)cache support



JPA-->java persistence api -->specification

		ORM-->object relational mapping -->object -->ibatis,eclipselink,toplink,hibernate



Employee CRUD-->create,read,update,delete


	jdbc--->jpa
	
	
	java project
	
	
		jpa-jars 
		
		mysqlconnector-jar
	
	
		META-INF
		
			JPA--HIBERNATE 
		
		persistence.xml
			<persistence>
				<persistence-unit>
				<!--four Database properties  -->
				<property>
				<!-- three hibernate properties-->
				</persistence-unit>
			
			
			</persistence>
			
@Entity
@Id
@Column
@Table
@GeneratedValue		
		
		
JPQL:		
		
		
		PERSIST,MERGE,REMOVE,FIND--->ONE ROW
		
		
		JAVA PERSISTENCE QUERY LANGUAGE -createQuery()
		
		mysql--->select eid,ename from astra_emps;// DB depenedent query 
		
		JPQL									  //database independent query

		TypedQuery<Employee> query=em.createQuery("select empid,empname from Employee",Employee.class)
		
		
@Entity
@Table(name="astra_emps")		
class Employee
{


}		

Criteria API
		
Persistence life cycle 
		
		
Relationships-->@onetoone @onetomany	

corejava:

Spring Framework:
==================		
	Spring is a non-invasive framework,which is used to create light weight and loosley coupled application

2 types  framework

	NON-INVASIVE	spring,hibernate :it will never force to the developer to implement predefined API
	INVASIVE		struts:even though its a framework it will force developer to implement predefined API
	
	LIGHT WEIGHT 	spring
	HEAVY WEIGHT	servlet,ejb,jsf,struts....
	
	
	LOOSLEY COUPLED 
	TIGHTLY COUPLED




Servlet-->web app


1)implements Servlet	5 methods
2)extends GenericServlet	5 methods
3)extends HttpServlet 12 methods

class Login extends HttpServlet
{//12 methods



}

1000*12=12000


EJB-->heavy weight component

spring


class Test
{
Test(String name)
{

}

public void m1()
{
.....
}


}

class Client
{

public void m2()
{
	Test test=new Test();//tightly coupled
	test.m1();
}


}

spring --->loosley coupled-->container 

Rod Johnson-2003

EJB-->interface21-->2003 1.x-->6.x-->5.x-->20+ modules

	spring core module/dependency injection module/IOC(inversion of control)
	spring jdbc
	spring orm
	spring web
	spring jpa
	spring rest
	spring security
	spring aop ......
	
				container -->spring container -->object life cycle 
			
	

	
object life cycle

	creation of object 
	wiring the object
	configuring the object 
	destroying the object 

spring containers

	1)BeanFactory //Lazy initializer
	2)ApplicationContext   //Eager initializer



		configuration -->xml,java,annotation


	xml configuration
	<beans>
		<bean>
			<property>
			scope-->singleton,prototype
	
	setter injection --><property>
	constructor injection--><constrcutor-arg>
	
	autowiring --->byname,bytype,constrcutor


annotation configuration


@Component
@Autowired
@Componentscan
@Qualifier
@Configuration
@Bean
@Service
@Repository
@Componentscans



Java configuration
-------------------

NOTE:spring has given annotations for userdefined classes but not for predefined classes


	@Component/@Service/@Repository

Employee

JPA
ENtityManager 
transaction,server....

		@Bean
	public Employee getEmployee()
	{
	
		return new Employee();
	}
	
	Student
	-->properties
		address
		Taddress			XMl,Java,Annotation
	
	
	Address
	
	
	TAddress
	
	
JDBC API



	java -->DB
	
	ojdbc.jar ,mysql-connector

Spring JDBC--->loosley coupled 


	spring is light weight and loosley coupled  


	spring jdbc,spring aop,spring orm spring web......
	
	
	JDBC-->CRUD
	JPA-->CRUD-->no quers ,db independent
	
	
	spring JDBC-->JdbcTemplate
	
	
	SPring
	
	
	
		ProductManagementApp	
		
		1)AddProduct			
		2)UpdateProduct
		3)DeleteProduct
		4)GetProductInfo
		5)GetAllProducts
		6)GetALLProducts In between Price
		7)GetAll Products With Category
		8)GetAll Products by Brand
		
		Using Spring JPA with maven(mysql) 
	
	
	
Spring MVC:
=============	
	
	
	model view controller
	
	spring mvc:front controller--->DispatcherServlet
	
	

controller 

	@Controller

078	@RequestMapping
		method type-->get ,post,put,delete
		
		@RequestBody

Spring Boot:RAD


Spring BOOT=Spring + embededServer- xml config250


1)configuration
2)no implicit server 
3)dependencies



1)AutoConfiguration 		most of the commonly used classes already configured by the spring boot(datasoruce,entitymanagerfactory)
2)embededServer 				internal server  tomcat
3)starter dependencies  		starter parent 
4)actuators 		insite about project  /health /beans




STS




























	
		ProductManagementApp	
		
		1)AddProduct			
		2)UpdateProduct
		3)DeleteProduct
		4)GetProductInfo
		5)GetAllProducts
		6)GetALLProducts In between Price
		7)GetAll Products With Category
		8)GetAll Products by Brand



c3po,hikari,dmds,tomcat
	2.x/3.x hikari

Webservices:
RMI,EJB,SP,DCOM,CORBA,RPC

	APP1 <--->	APP2

	XML,JSON,PT,JS,HTML..

JSON



JACKSON API--

WEBSERVICES  2 

SOAP -->xml
REST-XML,JSON...

CrudRepository
JpaRepository



validations
global exception handling 

Security

authentication

authorization

JWT-<json web token


MYSQL :
=========
SQL:structural query language 


History 

1970's BY IBM
	
	Raymond Boyce
	Donald
	
	sequel
	
	System R
	
Database:
a database 	well ordered collection of data
	

Excel


Mysql

https://dev.mysql.com/downloads/installer/




constraints:
=============
constraint is rule or restriction applied on the table data 

Notnull,check,primary key,unique,foreign key
foreign key constraint:
========================

eid  ename  esal 	eadd    deptno 	  dname      dloc 
1		x   1000    hyd   	 10      "admin"	hyderabad
2		y   2000    hyd   	 20      "hr"	    delhi
3		z   3000    hyd   	 30      "trainer"	mumbai
4		b   4000    hyd   	 10      "admin"	hyderabad
5		a   5000    hyd   	 20      "hr"   	delhi
6		c   4500    hyd   	 30      "trainer"	mumbai
7		d   6500    hyd   	 10      "admin"	hyderabad
8		e   2500    hyd   	 20      "hr"	    delhi
9		f   1500    hyd   	 30      "trainer"	mumbai

emp

eid  ename  esal 	eadd    deptno 	  
1		x   1000    hyd   	 10     
2		y   2000    hyd   	 20     
3		z   3000    hyd   	 30     
4		b   4000    hyd   	 10     
5		a   5000    hyd   	 20     
6		c   4500    hyd   	 30     
7		d   6500    hyd   	 10      
8		e   2500    hyd   	 20     
9		f   1500    hyd   	 30      


dept
deptno 	  dname         dloc 
10       "admin"    	hyderabad
20       "hr"	        delhi
30       "trainer"	    mumbai 


Joins:=
========
temparary relation between column coulumns of the tables














create database astra_india;

use astra_india;

#DDL,DML,DRL

#DDL-->data defination language ,create,alter,drop,truncate,rename

create table products(productId int,productName varchar(15),price decimal,category varchar(15));

desc products;

create table products_info as select * from products;

create table products_info as select * from products where 1=2;

alter table products add prodDesc varchar(20);

alter table products drop prodDesc;

alter table products rename to products_data;

alter table products_data change productid pid int;

truncate table products_Data;

drop table products_Data;

#DML-->insert,update,delete

insert into products_info values(123,'delltv123',23400,'electronics');

insert into products_info

values(124,'tiger',19500,'toys'),

       (125,'lion',22010,'toys'),

	   (126,'samsung',33400,'electronics'),

	   (127,'toor dal',29400,'grocories');

insert into products_info (productid,productname)values(222,'dell-lap');

select * from products_info;

update products_info set productname='mitv' where productid=123;

update products_info set productname='oppo-mobile',price=89000 where productid=126;

update products_info set price=price+99;

delete from products_info where productid=124;

delete from products_info;

select * from products_info where productid=123;

select productid,productname from products_info;

select * from products_info where price between 15000 and 25000;

select * from products_info where price between 15000 and 20000 and category='toys';

select max(price) from products_info;

select min(price) from products_info;

select sum(price) from products_info;

select avg(price) from products_info;

select count(price) from products_info;

truncate table products_info;

select * from products_info limit 3;

select * from products_info where category like "e%";

select * from products_info where category like "%ys";

select * from products_info where productname in('tiger','dell','samsung');

select upper(productname) from products_info;

select lower(productname) from products_info;

select length(productname) from products_info;

select * from products_info order by productname desc;

select * from products_info order by productname asc;

select * from products_info;

#constraints

insert into products_info values(555,'intel',-800,'electronics');

insert into products_info (productid,productname)values(222,'dell-lap');

#notnull,check,unique,primary key,foreign key
 
create table emp_info(empid int,ename varchar(15) not null,esal int,eadd varchar(10));

insert into emp_info values(555,'suresh',2000,'hyderabad');

insert into emp_info(empid,ename,esal) values(666,'mahesh',2000);

select * from emp_info;

select * from emp_info1;

create table emp_info1(empid int unique,ename varchar(15) not null,esal int check(esal>10000),eadd varchar(10),check(length(ename)>6));

insert into emp_info1 values(555,'sureshkumar',12000,'hyderabad');

#primary key=unique+NN

insert into emp_info1(ename,esal,eadd) values('maheshkumar',22000,'hyderabad');

create table emp_info2(empid int primary key,ename varchar(15) not null,esal int check(esal>10000),eadd varchar(10),check(length(ename)>6));

insert into emp_info2 values(555,'sureshkumar',12000,'hyderabad');

insert into emp_info2(ename,esal,eadd) values('maheshkumar',22000,'hyderabad');
 
CREATE TABLE dept(

    deptno INT,

    dname VARCHAR(14),

    loc VARCHAR(13),

	constraint pk_dept primary key (deptno)

);

INSERT INTO dept(deptno, dname, loc) VALUES

(10, 'ACCOUNTING', 'NEW YORK'),

(20, 'RESEARCH', 'DALLAS'),

(30, 'SALES', 'CHICAGO'),

(40, 'OPERATIONS', 'BOSTON');

select * from dept;

CREATE TABLE emp(

    empno INT,

    ename VARCHAR(10),

    job VARCHAR(9),

    mgr INT,

    hiredate DATE,

    sal DECIMAL(7,2),

    comm DECIMAL(7,2),

    deptno INT,

   constraint pk_emp primary key (empno),

   constraint fk_deptno foreign key (deptno) references dept (deptno) 

);
 
INSERT INTO emp VALUES

(7839, 'KING', 'PRESIDENT', null, '1981-11-17', 5000, null, 10),

(7698, 'BLAKE', 'MANAGER', 7839,'1981-05-01', 2850, null, 30),

(7782, 'CLARK', 'MANAGER', 7839, '1981-06-09', 2450, null, 10),

(7566, 'JONES', 'MANAGER', 7839, '1981-04-02',2975, null, 20),

(7788, 'SCOTT', 'ANALYST', 7566, '1981-04-19',3000, null, 20),

(7902, 'FORD', 'ANALYST', 7566, '1981-03-12', 3000, null, 20),

(7369, 'SMITH', 'CLERK', 7902,'1980-12-17', 800, null, 20),

(7499, 'ALLEN', 'SALESMAN', 7698,'1981-02-20', 1600, 300, 30),

(7521, 'WARD', 'SALESMAN', 7698, '1981-02-22',1250, 500, 30),

(7654, 'MARTIN', 'SALESMAN', 7698,'1981-09-28',1250, 1400, 30),

(7844, 'TURNER', 'SALESMAN', 7698,'1981-09-08',1500, 0, 30),

(7876, 'ADAMS', 'CLERK', 7788, '1987-05-23',1100, null, 20),

(7900, 'JAMES', 'CLERK', 7698,'1981-03-12',950, null, 30),

(7934, 'MILLER', 'CLERK', 7782,'1982-01-23',1300, null, 10);

select * from emp;

select * from dept;

delete from dept where deptno=20;
 
#Joins

#cross join,equi join -->left outer ,right outer join

select * from emp;

select * from dept;
 
select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e,dept d;

select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e cross join dept d;

#equi join/inner join

select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e,dept d where e.deptno=d.deptno;

select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e,dept d where e.deptno=d.deptno;

insert into emp(empno,ename,sal) values(123,'sandeep',23000);

select * from emp;

select * from dept;

select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e left outer join dept d on e.deptno=d.deptno;

select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e right outer join dept d on e.deptno=d.deptno;

select e.empno,m.ename,e.ename as manager from emp e ,emp m where e.empno=m.mgr;
 
 
 
 
select * from emp;

select deptno,sum(sal) from emp group by deptno;

select deptno,min(sal) from emp group by deptno;

select deptno,max(sal) from emp group by deptno;

SELECT ename, sal + comm AS total

FROM Emp

ORDER BY total DESC;

SELECT * FROM EMP WHERE SAL>(SELECT SAL FROM EMP WHERE EMPNO=7934);

SELECT * FROM EMP WHERE SAL!=(SELECT SAL FROM EMP WHERE EMPNO=7499);

SELECT * FROM EMP WHERE SAL<(SELECT SAL FROM EMP WHERE EMPNO=7499);

SELECT * FROM EMP WHERE SAL>(SELECT avg(SAL) FROM EMP);

SELECT * FROM emp   

WHERE sal > ANY (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000);

SELECT * FROM emp   

WHERE sal > All (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000);

SELECT * FROM emp   

WHERE sal IN (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000);
 
SELECT D.* FROM DEPT D WHERE EXISTS(SELECT E.EMPNO FROM EMP E WHERE  E.DEPTNO=D.DEPTNO);

SELECT D.* FROM DEPT D WHERE not EXISTS(SELECT E.EMPNO FROM EMP E WHERE  E.DEPTNO=D.DEPTNO);
 
SELECT * FROM emp WHERE sal =

( SELECT max(sal) FROM emp WHERE sal < 

( SELECT max(sal) FROM EMP));


Mongo: C++
		2007
		
		not only SQl
		
		
		document
		graph
		key value

Docker :-


VM

it was working in my machine


		VM
		
		
		
		

	main macihne 
	
docker compnents

	docker client,server
	docker image
	docker reigstry
	docker container
	
	communication between docker client,docker host using REST API
	
	docker image :its template that containse instructions for the docker container
				template we will write using language YAML(Yet Another Markup language)

docker image instructions:
=========================

	from
	pull
	run
	cmd
	
	repository:collection of docker images

dcoker compose
docker swarm

docker commands:
=================
	docker -v						 to know the version docker which is installed 
	docker ps  						 will show all running docker container s
	docker ps -a 					 will show all docker containers
	docker run imagename:tagname     to run docker container 
	docker run -it imagename:tagname run container and connecct to it 
	docker run -d imagename:tagname  run a container in the background
	docker stop containerid			 to stop container	
	docker kill container 			 to kill container

	docker images						list available images
	docker search imagename			to search an image
	docker pull imagename 			to pull an image

	docker rmi "image id/name"       to remove an image
	docker rm "container id/name"       to remove a  container 
	
	docker ps -->list containers only which are running 

	docker ps -a -->list all 

	docker start "container id" -->to start container

	docker stop "container id" -->to stop container 

	docker run "image name" -->to run docker image 

	docker image ls -->to get list of images 

	docker rmi "id of image"-->to remove image

	docker rm "id of container"--to remove container  


Devops Tools
 	

	Architecture:
	
		Automation
		configuration management
		integration
		collaboration

Jenkins
	continuous  integration

	CI/CD
	jenkins pipeline is a combination of plugins that supports integration and
	implementation continuous delivery pipelines
	
	a pipeline is group of events interlinked with each other in a sequence
	
		build==>test==>deploy===>release
		
	JenkinsFile:jenkins pipelines can be defined by using text file i.e JenkinsFile

	DSL(domain specific language)

	
	JenkinsFile can be defined by either web ui or with jenkins file
	
	
	
	Why Jenkins Pipeline:
	
	Scripted pipelines terminologies
		pipeline
		node
		stage
		step
	Declarative pipelines terminologies
		pipeline
		agent
		stage
		step
		
		
		Build Pipeline  Version

	
	two types of pipelines
	
			1)declartive 		:WE WILL WRITE GROOVY CODE CONTAINING "PIPELINE BLOCKS" WHICH IS CHECKED INT SCM
			2)scripsted pipeline:WE WILL WRITE FROVY CODE WHERE THE CODE IS DEFINED INSIDE "NODE"
	
 1)declartive 	
	
		pipeline:Block of all instructions to build,test,deliver a software
		agent	:assigned to execute the pipeline  on a node and allocate a workspace for the pipeline
		stage	:stage is a block that has steps to build,test,deploy 
				the app stages are used to visualize the jenkins pipeline process
		step   :step will have task to perform like run docker image,create a file,delete a file


pipeline {
         agent any
         stages {
                 stage('Build') {
                 steps {
                     echo 'Hi, AstraZeneca. Starting to build the App.'
                 }
                 }
                 stage('Test') {
                 steps {
                    input('Do you want to proceed?')
                 }
                 }
                 stage('Deploy') {
                 parallel { 
                            stage('Deploy start ') {
                           steps {
                                echo "Start the deploy .."
                           } 
                           }
                            stage('Deploying now') {
                            agent {
                                    docker {
                                            reuseNode true
                                            image ‘nginx’
                                           }
                                    }
                            
                              steps {
                                echo "Docker Created"
                              }
                           }
                           }
                           }
                 stage('Prod') {
                     steps {
                                echo "App is Prod Ready"
                              }             
              }
}
}

Microservices:

	it says decompose your large project into smaller services and later communicate them
	

	size less
	independent server 
	
	independently deployable

		communication
				synchronous		-->RestTemplate
				asynchronous	-->kafka,activemq,rabbitmq...
		seaching  billing cart login


Docker:
========
	** docker is an open source containerzation engine,which automates the packaging,shipping,and deployment
	of any software application that are presented as a lightweight 
	
** A docker container is a software bucket comprising everything necessary 
	to run the software independently
	
	** a docker container includes a software component along with all its dependencies
		(binaries,libraries,configuration files,scripts,jars,....)

	docker engine 
	docker hub

Virtualization
===============it is hardware level

		it is a techinique of importing a guest os on host os
		
		* running multiple VMs leads to unstable performance 

		* Hypervisors  are not as efficient as the host OS
		
		*Boot UP Process is long and takes time 
		
Containerization	
==================		
		its a technique of bringing virtualization to OS level
		
		its a type of virtualization
		
		
		Advantages
		
		containers  are on the same OS lighter and smaller 
		better resource utilization as compared to VMS
		boot up process is short and takes fraction of seconds
		
		
		docker image is template using which we can create docker container 
		
		docker containers are ready applications created from docker images 
		
		
Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\SANDEEP\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\SANDEEP\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\SANDEEP\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\SANDEEP\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  app*        Docker App (Docker Inc., v0.9.1-beta3)
  builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.5.1-docker)
  compose*    Docker Compose (Docker Inc., 2.0.0-beta.1)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.8.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		























