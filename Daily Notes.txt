


Language:
		communication with human
		
				english,telugu,tamil,kannada,hindi......
		
Programming Languge:
===================		
		communication with machine
	
		set of programs 

		c,c++,java,python,.net,....


	POP								OOP					
	B,BCPL,C,COBOL,PHOTON...	c++,java,python,.net,....
	
			performance			inheritance,polymorphisam
			security			abstraction,encapsulation
		
Why python

Python--1991	feb 20th 1991

	guido van russam

		1.x
		2.x
		3.x

HelloWorld.java

		
class HelloWorld
{
public static void main(String args[])
{
	System.out.println("welcome to java .....");
}

}	53 keywords

english 26
compile--		.class
execute--
		

	33 keywords


python-->the complete monty python's circus


		1.Funtional Programming	from C Language
		2.Object Oriented Programming feature from C++
		3.Shell Scrpting features from perl & shell script
		4.Modular Programming
		
		C,ABC-->syntax


	1.desktop applications	(tkinter)
	2.web applicationss		django/flask 
	3.database applications	(PDBC)
	4.network programming
	5.gaming
	6.DA
	7.IOT
	8.ML
	9.AI


Features:
=========

1)simple and easy to learn 
2)free source and open source  jython
3)High level Programming language
4)platform independent 	
5)portability 
6)dynamic typed 		a=123		int a=123;//static typed 
7)interpreted
8)rich library set




identifiers:
===========
any name in python will call it as identifier

	varname,classname,method(funtion),interface,objname....
	
			a-z
			A-Z
			0-9
			_
	
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 
'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 
'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


Datatypes:
==========


		sandeep
		number 12312312312312
		23.234
		
	1)int
	2)float
	3)complex
	4)bool
	5)str
	
	6)List
	7)Tuple
	8)Set
	9)Frozenset
	10)dict
	11)None



	type()
	id()
	print()
	
	typecasting
	int()
	float()
	complex()
	str()
	bool()
	input()

*** Fundamental datatypes are immutable




	List
	=====
		To store group of values/objects as a single entity 
	 
	 1)duplicates are allowed
	 2)insertion order is preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)growable in nature 
	 5)[] square brakets
	 6)list is mutable(append,remove)
	 
	 Tuple:
	 ========
	 	To store group of values/objects as a single entity 
	 
	 1)duplicates are allowed
	 2)insertion order is preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)() paranthesis
	 5)tuple is imutable	
	 
	 
	Set:
	=====
			To store group of values/objects as a single entity 
	 
	 1)duplicates are not allowed
	 2)insertion order is not preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)growable in nature 
	 5){} curly braces
	 6)set is mutable(add,remove)
	 
	 FrozenSet:
	 ==========
	 	To store group of values/objects as a single entity 
	 
	 1)duplicates are not allowed
	 2)insertion order is not preserved 
	 3)Both homogeneous and heterogeneous objects are allowed 
	 4)not growable in nature 
	 5)({}) curly braces
	 6)frozenset is imutable
	 
	 
	 dict:
	 =====
	 1)group of objects as a key,value pair
	 2){}
	 3)duplicate keys are not allowed and values can be duplicate
	 4)mutable
	 5)growable in nature 
	 
	 
	 
	 
String :
===========
		sequence chars / group of chars-->string 
			
				name="Astrazeneca"
				
				index -->0
	 
				+ index
				- index
	 
	 input
	 
	 
	 
	 identation
	 
	flow control statementes

Functions:
==========
	reusability


	def add():
		


Lamda Functions:
================

	lambda keyword


#syntax: lambda args:expression


input

	username	astrazenca
	password	astra123


		login success
		
		invalid credentials

	python---->file

		r,w,a

String/LIst/SET/Dict operations:
================================
OOPS:
=======

class
object 
constrcutor 
self
__init__


class is a collection of data members and member functions

	class 

oops 
	inheritance--code reusability

	its a process of aquiring the features from one class to another class

	
	class Test
		1000 methods
	
	
	
	
	class Child(Test)
	
		20 methods

	inheritance	-->code reusability
	
	polymorphisam -->method overloading method overriding 
	
	method overloading:
			method name is same no of params are different 
			
	method overriding:
			method name is same the implementation is different
			
			
	Exception Handling:
=======================	
			
			with out exceptiond handling 
				
				1)abnormal termination
				2)system defined error messages 
			
			
			with exception handling
			
				1)normal termination
				2)user friendly error messages
			
			
			
	try	--error code 
	
	
	except--handling code 
	
	
	
	4 keywords
	
		try		error code
		except	handling code
		finally	cleanup code
		raise	
	
	
	
	
	zerodivisioerror
	syntaxerror
	valueerror
	filenotfound
	exception
	
	
	
	pip instlall packagename
	
	
JAVA:
======
	
	why java ?
	
	one of the object oriented PL
	
	
	1996	-->JDK 1.0		-->sun micro system--->oracle corporation
	
				21
			OAK-->James Gosling
	
	
	1)platform independent  WORA
	2)Garbage Collection   automated  garbage collector 
	
					java
				jse	 jee  jme	
	
		1)standalone applications(core java,awt,swings,applets....)
		2)web application		(servlets,jsp,mvc,spring web...)
		3)distributed 			(webservices)
		4)mobile 				(android)	
	
	
	welcome/helloworld
	
	53 
	
class HelloWorld
{
public static void main(String args[])
{
	System.out.println("welcome to java .....");
}

}
		javac filename.java
		java classname

identifiers:
=============

	any name in java will call it as identifier 
	
		classname,methodname,varname,objname,interfacename.....


		a-z
		A-Z
		0-9
		$
		_

variables:
===========
		name given to the memory
		
		local varibles
		global variables


static typed 

	datatype varname=value;



PDT 		NPDT
8 			Stirng,array

	byte	1 byte		-128 to 127
	short	2			-32768 to 32767
	int		4			-2147483648 to 2147483647
	long	8           -2 power 63 to (2 power of 63 )-1
								long age
	float	4         23.5435346312786873  5-6 decimal places
	double	8							14-15 decimal places
	
	boolean	1bit    	true false 
	char 	2bytes		'M'



4 points

syntax:
			for static properties we will have static keyword
			if there is no static keyword i.e instance 

memory
			instance properties will get memory  at the time of object creation
			
			static properties will get memory only once at the time of class loading into jvm
			
				classname objname=new classname();
		A			A obj=new A();
			
access
			if it is instance we have to access by using object reference 
			if it is static we have to access by using classname 
		

usage 
			
			if we have common data where we required one time memory will go for static

					countryname,statename,clg name,schoolname,orgname 
			if we have unique data to represnt then will go with instance 
			
					eid,name,aadhar,pan,accno....

		by default package for every java file is java.lang
		by default parent class for every java file  java.lang.Object
	
package:folder
		2 types
			predfined packages	
			user defined 	package 
	
import 

eclipse IDE


methods


syntax
======

	accessmodifier instance/static returntype methodname(dt parm1,...)
		{
		
		
		
		}

OOPS:
====	
	inheritance		code reusability  extends ,implements
	polymorphisam
	encapsulation
	abstraction







access modifiers:
==================

	public private protected default
	

NOTE
		BY DEFAULT PACKAGE FOR EVERY JAVA FILE IS java.lang
		BY DEFAULT PARENT CLASS FOR EVERY JAVA CLASS  java.lang.Object
	



Multiple Inheritance 
		not supported by java through classes
		supported by java through interfaces 


abstract method ,concrete method

concrete method:
===============
	a method with body/implementation will call it as concrete method

abstract method:
================
	a method with out body/implementation will call it as abstract method


		public abstract void m1();



	class-->its a collection only concrete methods
abstract class-->its a combination of both concrete and abstract methods
	interface--->its a collection of only abstract methods

			interface methods are by default public abstract
			interface variables are by default public static final
	

polymorphisam
Overloading 
	method name is same signature is different
						no of params
						order of params
						type of params 

Overriding

	method name is same implementation is different 
	
	
	
AccessModifiers:
===============
		public			anyone/anywhere 
		protected		package level scope/outside the package only in child classes 
		default			package level scope 
		private 		class level scipe 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




















